<?xml version="1.0"?>

<!-- While I'm preparing this code for submission, I'm keeping trying to -->
<!-- keep this package free of any dependencies, while still being close -->
<!-- to the correct jakarta way of doing things.  So I've copied a       -->
<!-- number of the build files from jakarta, modified them slightly and  -->
<!-- have put them in my conf directory for now, this will all go away   -->
<!-- if this tag gets accepted...                                        -->

<!DOCTYPE project [
    <!ENTITY common SYSTEM "file:./conf/jakarta/jakarta-common.xml">
]>

<project name="display" default="main">

   <!-- Need to look into this one, if I don't disable the build fails -->
   <property name="disable.examples.html" value="true"/>

   <!-- Setup the classpath with the jars the user has provided -->

   <property file="./conf/local.properties"/>
   <property name="classpath" value="${servlet.jar}:${log4j.jar}:${beanutils.jar}" />

   <property name="version" value="0.8.5" />
   <property name="versiondate" value="03/23/2003" />

   <property name="tar.user" value="ant"/>
   <property name="tar.group" value="ant"/>
   <property name="tar.mode" value="644"/>

   <!-- Make sure the user has pointed us at good copies of the .jar files -->
   <!-- that we are dependent on                                           -->

   <property name="checkRequirements.pre" value="checkRequirements.pre"/>
   <target name="checkRequirements.pre">
      <antcall target="checkRequiredFile">
         <param name="file" value="${servlet.jar}"/>
         <param name="fail.message" value="a jar file containing the Servlet/JSP classes is required to compile the display taglib. please define the property servlet.jar in your local.properties file and ensure that the file exists"/>
      </antcall>

      <antcall target="checkRequiredFile">
         <param name="file" value="${beanutils.jar}"/>
         <param name="fail.message" value="a jar file containing the Jakarta beanutils classes is required to compile the display taglib. please define the property beanutils.jar in your local.properties file and ensure that the file exists"/>
      </antcall>

      <antcall target="checkRequiredFile">
         <param name="file" value="${collections.jar}"/>
         <param name="fail.message" value="a jar file containing the Jakarta collections classes is required to compile the display taglib. please define the property collections.jar in your local.properties file and ensure that the file exists"/>
      </antcall>

      <antcall target="checkRequiredFile">
         <param name="file" value="${log4j.jar}"/>
         <param name="fail.message" value="a jar file containing the Jakarta log4j classes is required to compile the display taglib. please define the property log4j.jar in your local.properties file and ensure that the file exists"/>
      </antcall>
   </target>


   <!-- When we build the examples, we need to make sure and copy the .jar -->
   <!-- files that we are dependent on...                                  -->

   <property name="examples.pre" value="examples.pre"/>
   <target name="examples.pre">
      <copy todir="${build.examples}/WEB-INF/lib" file="${log4j.jar}"/>
      <copy todir="${build.examples}/WEB-INF/lib" file="${beanutils.jar}"/>
      <copy todir="${build.examples}/WEB-INF/lib" file="${collections.jar}"/>
   </target>


   <!-- I keep some things in some non-standard directories while I'm     -->
   <!-- preparing this submission, this just cleans things out completely -->

   <property name="clean.post" value="clean.post"/>
   <target name="clean.post">
        <echo level="info">Cleaning build and distribution directories</echo>
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
   </target>

   <!-- Bring in the "standard" taglibs build process... -->
   &common;

   <!-- Target I typically call during development which builds the tag and -->
   <!-- war files, and then redeploys them to my server                     -->

   <target name="cycle" depends="dist">
      <!--
      <copy todir="C:/JRun/servers/default/deploy" file="dist/display-examples.war"/>
      <copy todir="C:/JRun/servers/default/deploy" file="dist/display-doc.war"/>
      -->
      <antcall target="site" />

      <copy tofile="C:/JRun/servers/default/deploy/display-examples-${version}.war" file="dist/display-examples.war"/>
      <copy tofile="C:/JRun/servers/default/deploy/display-docs-${version}.war" file="dist/display-doc.war"/>
      <copy tofile="C:/JRun/servers/default/deploy/display-${version}.war" file="dist/display-site.war"/>
   </target>

   <!-- =================================================================== -->
   <!-- Assemble the documentation application                              -->
   <!-- =================================================================== -->
   <target name="site" depends="prepare">
      <mkdir dir="${build.dir}/${taglib.name}/${taglib.name}-site" />
      <mkdir dir="${build.dir}/${taglib.name}/${taglib.name}-site/WEB-INF" />

      <tstamp>
         <format property="timestamp" pattern="MM/dd/yyyy hh:mm:ss aa" />
      </tstamp>

      <filter token="version" value="${version}" />
      <filter token="versiondate" value="${versiondate}" />
      <filter token="buildtime" value="${timestamp}" />

      <copy todir="${build.dir}/${taglib.name}/${taglib.name}-site/WEB-INF"
         filtering="true" overwrite="true">
         <fileset dir="site/conf"/>
      </copy>

      <copy todir="${build.dir}/display/display-site" filtering="true" overwrite="true">
         <fileset dir="site/web"/>
      </copy>

      <jar jarfile="${dist.dir}/${taglib.name}-site.war"
         basedir="${build.dir}/${taglib.name}/${taglib.name}-site" />
   </target>

    <!-- =================================================================== -->
    <!--            Creates source distribution of project                   -->
    <!-- =================================================================== -->
    <target name="dist-src" depends="clean"
        description="create source distribution for release (in parent directory)">
        <property name="src.archive.name" value="${taglib.name}-src-${version}"/>
        <property name="src.archive.target" value="../${src.archive.name}"/>
        <zip zipfile="${src.archive.target}.zip">
            <zipfileset prefix="${taglib.name}" dir="${basedir}">
                <patternset id="srcfiles">
                    <!-- Exclude files that might be left over by various editors -->   
                    <exclude name="*.log"/>
                    <exclude name="*.old"/>
                    <exclude name="*.bak"/>
                    <exclude name="*.*~"/>
                    <exclude name="*.java.txt"/>
                    <!-- Exclude any old version of files removed by CVS -->
                    <exclude name=".#**"/>
                    <include name="**"/>      
                </patternset>
            </zipfileset>
        </zip>
        <tar tarfile="${src.archive.target}.tar">
            <tarfileset dir="${basedir}" mode="${tar.mode}" 
                prefix="${taglib.name}"
                username="${tar.user}" group="${tar.group}">
                <patternset refid="srcfiles"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${src.archive.target}.tar.gz" 
            src="${src.archive.target}.tar"/>
        <delete file="${src.archive.target}.tar"/>
    </target>

    <!-- =================================================================== -->
    <!--            Creates binary distribution of project                   -->
    <!-- =================================================================== -->
    <target name="dist-bin" depends="dist" 
        description="create binary distribution for release (in parent directory)">
        <property name="bin.archive.name" value="${taglib.name}-bin-${version}"/>
        <property name="bin.archive.target" value="../${bin.archive.name}"/>
        <zip zipfile="${bin.archive.target}.zip">
            <zipfileset prefix="${taglib.name}/dist" dir="${dist.dir}">
                <patternset id="binfiles">
                    <include name="${taglib.name}.jar"/>       
                    <include name="${taglib.name}.tld"/>  
                    <include name="${taglib.name}-examples.war"/>  
                    <include name="${taglib.name}-doc.war"/>  
                </patternset>
            </zipfileset>
        </zip>
        <tar tarfile="${bin.archive.target}.tar">
            <tarfileset dir="${dist.dir}" mode="${tar.mode}" 
                prefix="${taglib.name}/dist"
                username="${tar.user}" group="${tar.group}">
                <patternset refid="binfiles"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${bin.archive.target}.tar.gz" 
            src="${bin.archive.target}.tar"/>
        <delete file="${bin.archive.target}.tar"/>
    </target>
    
    <!-- =================================================================== -->
    <!--            Creates release distribution                             -->
    <!-- =================================================================== -->
    <target name="release" depends="dist-src,dist-bin" 
        description="create binary and source distributions for release"/>
        
    <!-- =================================================================== -->
    <!--            FTPs archive files to SourceForge                        -->
    <!-- =================================================================== -->
    <target name="ftp" depends="release" 
        description="FTPs archive files to upload.sourceforge.net">
        <property name="ftp.server" value="upload.sourceforge.net"/>
        <property name="ftp.user" value="anonymous"/>
        <property name="ftp.remoteDir" value="/incoming"/>
        <input message="Enter your e-mail (as a password) to connect to server:" 
            addproperty="ftp.password"/>
        <!-- You'll need NetComponents.jar in $ANT_HOME/lib to run this task -->
        <!-- http://www.savarese.org/oro/downloads/index.html#NetComponents -->
        <ftp server="${ftp.server}" remotedir="${ftp.remoteDir}" verbose="yes"
            userid="${ftp.user}" password="${ftp.password}" depends="yes">
            <fileset dir="..">
                <include name="${taglib.name}-src-${version}.zip"/> 
                <include name="${taglib.name}-src-${version}.tar.gz"/> 
                <include name="${taglib.name}-bin-${version}.zip"/> 
                <include name="${taglib.name}-bin-${version}.tar.gz"/>
            </fileset>
        </ftp>
    </target>
    
</project>









