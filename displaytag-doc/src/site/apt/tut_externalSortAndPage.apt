                                    ------------------------------
                                          External Sorting
                                    ------------------------------
                                          Fabrizio Giustina
                                    ------------------------------
                                              11-11-2005
                                    ------------------------------

External Sorting

+-------------------------------------------------------------------+
<display:table name="testList" sort="external" defaultsort="1" id="element">
  <display:column property="id" title="ID" sortable="true" sortName="id" />
  <display:column property="firstName" sortable="true" sortName="firstName" title="First Name" />
  <display:column property="lastName" sortable="true" sortName="lastName" title="Last Name" />
  <display:column property="address" sortable="true" sortName="address" title="Email Address"/>
</display:table>
+-------------------------------------------------------------------+



   When using the sort="external" property you are telling DisplayTag
   that your list is already sorted according to some specific column
   before the tag gets it. This is a must when used with partial lists
   as we will see below, however you can use it by itself. A new
   property named sortName has been addeed to the column tag. The
   purpose of this property is for convenience when writing the backend
   code that actually does the sorting of the data. For example the
   header link for the column with property id in the sample code above
   will render a link containing d-(encoded table id)-s=id. If you
   remove the sortName property from the column the link will instead
   contain d-(encoded table id)-s=0, which is the index of the column
   rather than the name. Once again it is solely for convenience.

   The first time you access a jsp with a DisplayTag in it, there are
   two ways for the tag to know how your data is sorted. Firstly it
   will check for a request parameter d-(encoded table id)-s. If that
   parameter exists, and its value matches the sortName of one of the
   declared column tags, then when it is rendered to html it will set
   the matching column as being sorted. If that parameter does not
   exist it will examine the defaultsort property of the table tag, if
   it exists then it will render the corresponding column as sorted.
   Otherwise no column will be rendered as being sorted. So really you
   have two options. Set your backend to sort your data based on a set
   column when there is no request parameter, and set your defaultsort
   parameter to match that column. Or ensure that all links pointing to
   your page that houses the DisplayTag have a d-(encoded table
   id)-s=(column index or sortName) parameter in them.

   To determine the request parameter name for column sorting you can
   do: new
   ParameterEncoder(tableId).encode(TableTagParameters.PARAMETER_SORT))
   . To get the order (ASC/DESC): new
   ParameterEncoder(tableId).encode(TableTagParameters.PARAMETER_ORDER)
   ). Descending is 2, Ascending is 1.

External Sorting And Paging (Partial Lists)

+-------------------------------------------------------------------+
<display:table name="testList" sort="external" defaultsort="1" pagesize="20" id="element" partialList="true" size="resultSize">
  <display:column property="id" title="ID" sortable="true" sortName="id" />
  <display:column property="firstName" sortable="true" sortName="firstName" title="First Name" />
  <display:column property="lastName" sortable="true" sortName="lastName" title="Last Name" />
  <display:column property="address" sortable="true" sortName="address" title="Email Address"/>
</display:table>
+-------------------------------------------------------------------+


   All of the above information for external sorting applies to partial
   lists. Additionally there are two new properties on the table tag:
   partialList and size. To enable partial lists simply set
   partialList="true" on the table tag. Next you must tell Display Tag
   the total size of your list since you are only making a specific
   subset of it available to the tag. You do this by storing the total
   list size in a java.lang.Integer object and putting it into some
   scope available to DisplayTag. Then you set size=(name the Integer
   was stored under) on the table tag. Very easy. It is also important
   that you specify a pagesize on the table tag. It is also a good idea
   to set your backend to load a default amount of your list when there
   are no request parameters, probably the first page worth of data.

   To determine the starting record you need to return based on the
   request parameters provided via Display Tag you can do:
   (Integer.parseInt(request.getParameter((new
   ParameterEncoder(tableId).encode(TableTagParameters.PARAMETER_ORDER)
   ))) - 1) * pageSize. To get the ending record just add pageSize to
   the above value.
