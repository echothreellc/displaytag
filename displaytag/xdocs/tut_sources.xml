<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <title>Data sources</title>
    <author email="fgiust(at)users.sourceforge.net">Fabrizio Giustina</author>
  </properties>
  <body>
    <section name="Data sources">
      <subsection name="Expressions">
        <p>Up until this point, we have simply had a List object available to us under the name "list" in the request 
          scope that has driven the display of the tables shown. We have been setting up that bean with the following 
          scriptlet, but presumably you would be doing something similar in your Action class rather then raw on this 
          jsp page.</p>
        <pre>&lt;% request.setAttribute( "test", new TestList( 10 ) ); %&gt;</pre>
        <p>This table is called with the following attributes:</p>
        <pre>&lt;display:table name="test"&gt;</pre>
        <p>You can also acquire a handle to the list you want to display by specifying not only a bean name, but also a 
          bean property (a getter method), and the table tag will call that property to fetch the list to display.</p>
        <p>Actually there are two "flavors" of displaytag: an <acronym title="expression language">EL</acronym> version,
          which requires j2ee 1.3 and a jsp 1.1 (j2ee 1.2 compatible) version</p>
          <p>In the EL version you can obviously use an EL expression, like name="${pageScope.name.property}"</p>
          <p>In the non-EL version you can define the "name" attribute using a really similar sintax, just without 
            the <code>${}</code>:</p>
   
          <p>You can define the scope of the bean adding one of the following suffix:</p>
          <ul>
            <li>pageScope</li>
            <li>requestScope (default)</li>
            <li>sessionScope</li>
            <li>applicationScope</li>
          </ul>
          <p>
            You can also access javabean style properties, mapped properties or indexed properties in the bean, also 
            nested. The syntax for accessing a javabean property is <code>.property</code> . You can read a mapped 
            property specifying it between <code>()</code> and an indexed property using <code>[]</code>.
          </p>
          <p>So the following:</p>
          <code>sessionScope.list.value.attribute(name).item[1]</code>
          <p>is equivalent to:</p>
          <code>session.getAttribute("list").getValue().getAttribute("name").getItem[1]</code>
      </subsection>
      
      <subsection name="Supported data">
          <p>The table tag actually supports the following kind of objects:</p>
          <ul>
            <li>a Collection</li>
            <li>an Enumeration</li>
            <li>a Map (values are displayed in row)</li>
            <li>a Dictionary (values are displayed in row)</li>
            <li>an array</li>
            <li>an Iterator</li>
            <li>any Object with an iterator() method</li>
            <li>... any other object will be displayed on a single row</li>
          </ul>
      </subsection>
      
      <subsection name="From a db?">
          <p>
            <strong>Displaytag will never support retrieving data from a db directly</strong>.
            Displaytag is here to help you in displaying data, not to retrieve them.
          </p>
          <p>Anyway, there are a couple of easy methods to get records from a db and display them using displaytag:</p>
          
          <p>1) Using jstl:</p>
          <p>just use the sql:query tag and pass the result to the table tag in this way</p>
<source>          
        &lt;sql:query var="results">
          select * from table
        &lt;/sql:query>

        &lt;display:table name="${results.rows}" />
        
        (or 
        &lt;display:table name="pageScope.results.rows" />
        if not using the EL version)
</source>

          <p>2) Using dynabeans</p>
          <p>see <a 
            href="http://jakarta.apache.org/commons/beanutils/api/org/apache/commons/beanutils/RowSetDynaClass.html">
            http://jakarta.apache.org/commons/beanutils/api/org/apache/commons/beanutils/RowSetDynaClass.html</a></p>
<source>          

&lt;%
      Connection con = ...; // just open a connection

      Statement stmt = con.createStatement();
      ResultSet rs = stmt.executeQuery("SELECT * from table");
      RowSetDynaClass resultSet = new RowSetDynaClass(rs, false);
      stmt.close();
      con.close();
      request.setAttribute("results", resultSet);
%>

      &lt;display:table name="requestScope.results.rows" />
</source>
      </subsection>
        
    </section>
  </body>
</document>

