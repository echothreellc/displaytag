<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>Export filter</title>
        <author email="fgiust(at)users.sourceforge.net">Fabrizio Giustina</author>
    </properties>
    <body>
        <section name="Export filter? What's that?">
            <p>
                When displaytag exports data in any non-html format, it needs to change the content type returned to the
                browser and reset any other content generated by the surrounding page.
            </p>
            <p>
                Sometimes this can't be done: if content has already been sent back to the user, the response can't be
                reset and you get an error. This could happen because:
            </p>
            <ul>
                <li>
                    Too many chars have been already written to the response, so that the response buffer was full and
                    response has been automatically flushed.
                </li>
                <li>
                    Something (tags? java snippets?) before the
                    <code>display:table</code>
                    tag has explicitely flushed the response (
                    <code>response.flushBuffer()</code>
                    ).
                </li>
                <li>
                    Your page is dinamically included into another page. This happens for example using Struts tiles.
                </li>
            </ul>
            <p>
                Another problem is related to exporting binary files. The output of binary data is not supported in
                jsps: it may work on some application server, but it may end up with errors in others. Because of this
                restriction an "external help" may be required. Cvs, xml and excel formats don't require a binary
                output, but if you want to try a pdf export or other custom binary formats you will have to face some
                problems.
            </p>
        </section>

        <section name="The solution">
            <p>
                The first attempt can be using a larger page buffer in your jsp pages, for example:
                <source>&lt;%@ page buffer = "16kb" %&gt;</source>
                However, this can work only if you are in the first situation listed above.
            </p>
            <p>
                In j2ee 1.3/jsp 1.2 containers you can take advantage of filters to solve the problem. Displaytag ships
                with a filter which works together with the table tag during export, disallowing the response to be
                flushed when an export has been requested.
            </p>
            <!-- <p>
                Another solution, if your application runs on a jsp 1.1 container and makes use of the
                <a href="http://www.springframework.org">Spring</a>
                MVC framework, is the Spring interceptor supplied with displaytag .
            </p>-->
        </section>


        <section name="Installing the export filter">
            <p>Configure the Filter in your web.xml:</p>
            <source>
                <![CDATA[
<filter>
    <filter-name>ResponseOverrideFilter</filter-name> 
    <filter-class>org.displaytag.filter.ResponseOverrideFilter</filter-class> 
</filter>
                    ]]>
            </source>
            <p>And add mappings for the pages that you will intercept, for example:</p>
            <source>
                <![CDATA[
<filter-mapping>
    <filter-name>ResponseOverrideFilter</filter-name> 
    <url-pattern>*.do</url-pattern>
</filter-mapping>
<filter-mapping> 
    <filter-name>ResponseOverrideFilter</filter-name> 
    <url-pattern>*.jsp</url-pattern>
</filter-mapping>
                    ]]>
            </source>
        </section>
<!--         <section name="Installing the spring interceptor">
            <p>
                You can configure the displaytag interceptor in Spring beanFactory adding it to the handler mapping
                definition:
            </p>
            <source>
                <![CDATA[
<bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
   <property name="interceptors">
     <list>
       <bean class="org.displaytag.filter.DisplayTagSpringInterceptor"/>
     </list>
   </property>
 </bean>
                    ]]>
            </source>
        </section> -->

    </body>
</document>

