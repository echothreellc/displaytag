<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>i18n</title>
        <author email="fgiust(at)users.sourceforge.net">Fabrizio Giustina</author>
    </properties>
    <body>
        <section name="i18n - Internationalization">
            <p>
                If you use displaytag in a multi-language application, you will probably need to translate html
                generated by displaytag as well. Displaytag supports i18n for html snippets used in the paging and
                export banner and for the title of column headers.
            </p>
            <subsection name="i18n for displaytag resources">
                <p>
                    Using the
                    <code>displaytag.properties</code>
                    file you can set all the messages handled by displaytag.
                </p>
                <p>Configuring:</p>
                <source>
                    <![CDATA[
paging.banner.one_item_found=One item found
                    ]]>
                </source>
                <p>
                    Will make displaytag output
                    <code>One item found</code>
                    when only a row is displayed.
                </p>
                <p>
                    In order to support other languages you can add any number of additional files named
                    <code>displaytag_LANGUAGE.properties</code>
                    . For example, you can add a
                    <code>displaytag_IT.properties</code>
                    for italian users with the following content:
                </p>
                <source>
                    <![CDATA[
paging.banner.one_item_found=Un solo elemento trovato
                    ]]>
                </source>
                <p>
                    You don't need to copy all the properties in any internationalized file (some of them are also
                    configuration properties which don't need to be translated at all). Configure displaytag properly in
                    the main
                    <code>displaytag.properties</code>
                    file and then replicate only the strings you want to translate.
                </p>
            </subsection>
            <subsection name="i18n for column title">
                <p>
                    There are a few different ways to define the content for a column header in the
                    <code>column</code>
                    tag:
                </p>
                <ol>
                    <li>
                        specifying a
                        <code>title</code>
                        attribute: the content of the title attribute will be used as is for the column header
                    </li>
                    <li>
                        specifying a
                        <code>titlekKey</code>
                        attribute: the content of the titlekey will be used to lookup a resource in a resource bundle
                        and the value will be used in the column header. If the specified key can't be found the
                        <code>???key???</code>
                        title will be displayed.
                    </li>
                    <li>
                        leaving both
                        <code>title</code>
                        and
                        <code>titleKey</code>
                        properties out, while using a
                        <code>property</code>
                        attribute: the content of the
                        <code>property</code>
                        attribute will be used to lookup a resource in the resource bundle. If not found, the same
                        (capitalized) value is used for the column header.
                    </li>
                    <p>
                        By default, displaytag will use JSTL to lookup the value in the
                        <code>titleKey</code>
                        attribute, miming the behaviour of the
                        <code>fmt:message</code>
                        tag. This means that you need a container which supports jstl and standard.jar in your
                        classpath: if you don't wish to use JSTL for i18n you will have a few other options (read the
                        "advanced" chapter below).
                    </p>
                </ol>

            </subsection>
        </section>
        <section name="Advanced">
            <p>
                Displaytag will probably be used in an application where content is already internationalized using a
                specific framework, which should provide a way to resolve the current locale and to lookup properties in
                a resource bundle.
            </p>
            <p>
                Displaytag provides a way to plug-in different adapters to use the same i18n support you are using in
                your application.
            </p>
            <subsection name="Locale resolution">
                <p>
                    By default displaytag will use the locale specified in the request (i.e. the locale set in the user
                    browser). This can be fine for a basic use, but you could need a way to override this selection and
                    to force a different locale.
                </p>
                <p>
                    Here comes the problem: if you already use Jstl, Struts or other frameworks you will know that there
                    is no standard way to specify the locale to use: each framework works in a different way.
                </p>
                <p>
                    Displaytag provides an interface
                    <code>LocaleResolver</code>
                    with a few ready to use implementations which match the behaviour of common frameworks. The locale
                    resolver is specified in the
                    <code>displaytag.properties</code>
                    file using the
                    <code>locale.resolver</code>
                    key.
                </p>
                <p>
                    If nothing is specified the locale from the request is used, as specified above. However, you are
                    free to configure here any custom implementation of the
                    <code>org.displaytag.localization.LocaleResolver</code>
                    interface with a simple method
                    <code>resolveLocale(HttpServletRequest)</code>
                </p>
                <p>Displaytag provides by default these ready to use implementations:</p>

                <table>
                    <thead>
                        <tr>
                            <th>class name</th>
                            <th>behaviour</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>org.displaytag.localization.I18nJstlAdapter</td>
                            <td>
                                Mimic JSTL, looking for a locale specified in session with the
                                <code>Config.FMT_LOCALE</code>
                                key.
                            </td>
                        </tr>
                        <tr>
                            <td>org.displaytag.localization.I18nStrutsAdapter</td>
                            <td>
                                Struts adapter, will look for the locale specified by
                                <code>Globals.LOCALE_KEY</code>
                            </td>
                        </tr>
                        <tr>
                            <td>org.displaytag.localization.I18nWebworkAdapter</td>
                            <td>
                                Webwork2 adapter, will look for the locale specified by the fist LocaleProvider action in the stack
                            </td>
                        </tr>
                        <tr>
                            <td>org.displaytag.localization.I18nSpringAdapter</td>
                            <td>
                                Spring adapter, will use
                                <code>RequestContextUtils.getLocale()</code>
                                for locale resolution (which will in turn delegate to the Spring locale resolver)
                            </td>
                        </tr>
                    </tbody>
                </table>

            </subsection>
            <subsection name="Resources lookup">
                <p>
                    Other than resolving the currently used locale, your framework will probably provide a standard way
                    to store i18n resources. Just like for the locale resolution, displaytag will allow you to plug in
                    different implementations.
                </p>
                <p>
                    Displaytag provides an interface
                    <code>I18nResourceProvider</code>
                    with a few ready to use implementations which match the behaviour of common frameworks. This is
                    configured in
                    <code>displaytag.properties</code>
                    using the
                    <code>locale.provider</code>
                    key. By default the JSTL implementation is used.
                </p>
                <p>
                    The ready to use locale resolvers are (yes, these are the same classes used for locale resolution,
                    since they implement both interfaces):
                </p>

                <table>
                    <thead>
                        <tr>
                            <th>class name</th>
                            <th>behaviour</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>org.displaytag.localization.I18nJstlAdapter</td>
                            <td>
                                JSTL implementation, works in the same way as fmt:message. Note that this depends from
                                the jakarta jstl implementation: it will also work with Resin jstl support, but you will
                                still need standard.jar in the classpath.
                            </td>
                        </tr>
                        <tr>
                            <td>org.displaytag.localization.I18nStrutsAdapter</td>
                            <td>
                                Struts adapter, will use
                                <code>TagUtils.message()</code>
                            </td>
                        </tr>
                        <tr>
                            <td>org.displaytag.localization.I18nWebworkAdapter</td>
                            <td>
                                Webwork2 adapter, will look for the first TextProvider action in the stack and will obtain a message for the given key.
                            </td>
                        </tr>
                        <tr>
                            <td>org.displaytag.localization.I18nSpringAdapter</td>
                            <td>
                                Spring adapter, will look for the configured
                                <code>messageSource</code>
                                and use it to obtain a value for the given key.
                            </td>
                        </tr>
                    </tbody>
                </table>
            </subsection>
        </section>
    </body>
</document>

